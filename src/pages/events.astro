---
import { slide } from 'astro:transitions';
import EventCard from '../components/EventCard.astro';
import Layout from '../layouts/Layout.astro';
import { directus } from '@/lib/directus';
import { readItems } from '@directus/sdk';

const isDev = import.meta.env.DEV;

// TODO: Add pagination
const events = await directus.request(
  readItems('events', {
    fields: ['*'],
    sort: ['-start_datetime'],
    filter: isDev
      ? { status: { _in: ['draft', 'published'] } }
      : { status: 'published' },
  })
);

const upcomingEvents = events.filter(
  (event) => new Date(event.end_datetime) > new Date()
);
---

<Layout title="Events - CPP Japanese Language Learners">
  <div class="mb-16 md:max-w-4xl px-4 mx-6 md:mx-auto flex flex-col">
    <!-- Events -->
    <div class="flex flex-col">
      <div class="breadcrumbs my-4">
        <ul>
          <li><a href="/">Home</a></li>
          <li>Events</li>
        </ul>
      </div>
      <h1
        transition:animate={slide({ duration: '0.3s' })}
        class="text-5xl font-bold mb-4 font-display"
      >
        Upcoming Events
      </h1>
      <!-- No upcoming events case -->
      <div class=`${upcomingEvents.length === 0 ? "flex flex-col" : "hidden"}`>
        <h2 class="mb-4">No upcoming events. Stay tuned! ٩(๑´∀ `๑ )</h2>
      </div>
      <!-- Render upcoming events in a single column on smaller devices -->
      <div
        class={`${upcomingEvents.length != 0 ? 'flex flex-col items-center' : 'hidden'} sm:hidden`}
      >
        {upcomingEvents.map((event) => <EventCard event={event} />)}
      </div>
      <!-- One upcoming event case -->
      <div
        class=`${upcomingEvents.length === 1 ? "flex flex-col items-center" : "hidden"}`
      >
        {
          upcomingEvents[0] ? (
            <EventCard
              event={upcomingEvents[0]}
              soonest
            />
          ) : null
        }
      </div>
      <!-- Multiple upcoming events case -->
      <div
        class={`${upcomingEvents.length > 1 ? 'hidden sm:grid grid-cols-2 gap-4' : 'hidden'}`}
      >
        {upcomingEvents.map((event) => <EventCard event={event} />)}
      </div>
    </div>
    <!-- Previous Events -->
    <div class="flex flex-col my-6">
      <h1
        transition:animate={slide({ duration: '0.5s' })}
        class="text-5xl font-bold mb-4 font-display"
      >
        Previous Events
      </h1>
      <!-- Single column on smaller devices, two column grid on larger screens -->
      <div class="flex flex-col sm:grid sm:grid-cols-2 sm:gap-4">
        {
          events
            .filter((event) => new Date(event.end_datetime) < new Date())
            .map((event) => <EventCard event={event} />)
        }
      </div>
    </div>
  </div>
</Layout>
